var entitiesAndRelationships =
$entitiesAndRelationships

const physicsSettings = {
  enabled: {
    edges: { smooth: false },
    physics: {
      barnesHut: {
        gravitationalConstant: -7000,
        //"springLength": 1000,
        avoidOverlap: 1,
        damping: 1,
      }
    },
  },
  disabled: {
    edges: { smooth: false },
    physics: { enabled: false }
  }
}

const styleSettings = {
  nodes: {
    class: {
      color: {
        border: '#631C58',
        background: '#CB39B5',
        highlight: {
          border: '#631C58',
          background: '#FF49E2'
        },
        hover: {
          border: '#631C58',
          background: '#CB39B5'
        }
      },
      font: {
        multi: true,
        color: '#ffffff'
      }
    },
    enumeration: {
      color: {
        border: '#0D4E4F',
        background: '#24C9CB',
        highlight: {
          border: '#0D4E4F',
          background: '#29FAFF'
        },
        hover: {
          border: '#0D4E4F',
          background: '#24C9CB'
        }
      },
    },
    case: {
      color: {
        border: '#126176',
        background: '#23BFEA',
        highlight: {
          border: '#126176',
          background: '#28D1FF'
        },
        hover: {
          border: '#126176',
          background: '#23BFEA'
        }
      },
    },
    structure: {
      color: {
        border: '#21328A',
        background: '#3551E2',
        highlight: {
          border: '#21328A',
          background: '#3B5BFF'
        },
        hover: {
          border: '#21328A',
          background: '#3551E2'
        }
      },
      font: {
        multi: true,
        color: '#ffffff'
      }
    },
    function: {
      shape: 'box',
      color: {
        border: '#814244',
        background: '#E57377',
        highlight: {
          border: '#814244',
          background: '#FF8489'
        },
        hover: {
          border: '#814244',
          background: '#E57377'
        }
      }
    },
    property: {
      shape: 'box',
      color: {
        border: '#1D733A',
        background: '#33D768',
        highlight: {
          border: '#1D733A',
          background: '#3CF87A'
        },
        hover: {
          border: '#1D733A',
          background: '#33D768'
        }
      }
    },
    default: {
      font: {
        multi: true
      }
    }
  },
  clusters: {
    class: {
      color: {
        border: '#631C58',
        background: '#CB39B5',
        highlight: {
          border: '#631C58',
          background: '#FF49E2'
        },
        hover: {
          border: '#631C58',
          background: '#CB39B5'
        }
      },
      font: {
        multi: true,
        color: '#ffffff'
      }
    },
    enumeration: {
      color: {
        border: '#0D4E4F',
        background: '#24C9CB',
        highlight: {
          border: '#0D4E4F',
          background: '#29FAFF'
        },
        hover: {
          border: '#0D4E4F',
          background: '#24C9CB'
        }
      },
    },
    case: {
      color: {
        border: '#126176',
        background: '#23BFEA',
        highlight: {
          border: '#126176',
          background: '#28D1FF'
        },
        hover: {
          border: '#126176',
          background: '#23BFEA'
        }
      },
    },
    structure: {
      color: {
        border: '#21328A',
        background: '#3551E2',
        highlight: {
          border: '#21328A',
          background: '#3B5BFF'
        },
        hover: {
          border: '#21328A',
          background: '#3551E2'
        }
      },
      font: {
        multi: true,
        color: '#ffffff'
      }
    },
    function: {
      shape: 'box',
      color: {
        border: '#814244',
        background: '#E57377',
        highlight: {
          border: '#814244',
          background: '#FF8489'
        },
        hover: {
          border: '#814244',
          background: '#E57377'
        }
      }
    },
    property: {
      shape: 'box',
      color: {
        border: '#1D733A',
        background: '#33D768',
        highlight: {
          border: '#1D733A',
          background: '#3CF87A'
        },
        hover: {
          border: '#1D733A',
          background: '#33D768'
        }
      }
    },
    default: {
      font: {
        multi: true
      },
      borderWidth:3
    }
  },
  edges: {
    class: {
      color: {
        color: '#CB39B5',
        highlight: '#FF49E2',
        hover: '#CB39B5'
      },
    },
    enumeration: {
      color: {
        color: '#24C9CB',
        highlight: '#29FAFF',
        hover: '#24C9CB'
      },
    },
    case: {
      color: {
        color: '#23BFEA',
        highlight: '#28D1FF',
        hover: '#23BFEA'
      },
    },
    structure: {
      color: {
        color: '#3551E2',
        highlight: '#3B5BFF',
        hover: '#3551E2'
      },
    },
    function: {
      color: {
        color: '#E57377',
        highlight: '#FF8489',
        hover: '#E57377'
      }
    },
    property: {
      shape: 'box',
      color: {
        color: '#33D768',
        highlight: '#3CF87A',
        hover: '#33D768'
      }
    },
    default: {
      font: {
        size: 11,
      },
      color: '#848484',
      length: 200,
    }
  }
}

let nodeIds = []
let nodeInfos = {}
let nodes = []

let network = undefined

const bindValues = () => {
  setSize()
  createDiagram()
  createLegend()
}

const createDiagram = () => {
  const entities = entitiesAndRelationships.entities
  const relationships = entitiesAndRelationships.relationships

  nodes = entities.map(entity => {
    nodeIds.push(entity.id)

    const parentIds = relationships
      .filter(item => item.targetEntityId == entity.id)
      .map(result => result.rootEntityId)

    const keys = Object.keys(entity.attributes)
    const attributes = keys.map(key => `${key}: ${entity.attributes[key]}`)
    const title = attributes.join('\n')

    let node = {
      id: entity.id,
      label: `<code>${entity.name}</code>\n<i>${entity.type}</i>`,
      type: entity.type,
      parentIds: parentIds
    }

    if (title) {
      node.title = title
    }

    const style = getStyle('nodes', entity.type)

    if (style) {
      const styleKeys = Object.keys(style)
      styleKeys.forEach(key => {
        node[key] = style[key]
      })
    }

    nodeInfos[node.id] = node
    return node
  })

  const edges = relationships.map(relationship => {
    const keys = Object.keys(relationship.attributes)
    const attributes = keys.map(key => `${key}: ${relationship.attributes[key]}`)
    const label = attributes.join('\n')

    let edge = {
      from: relationship.rootEntityId,
      to: relationship.targetEntityId,
      arrows: { to: true },
    }
    if (label.length > 0) {
      edge.title = label
    }

    const style = getStyle('edges', nodeInfos[relationship.targetEntityId].type)

    if (style) {
      const styleKeys = Object.keys(style)
      styleKeys.forEach(key => {
        edge[key] = style[key]
      })
    }
    return edge
  })

  const container = document.getElementById("classDiagram")
  const dataToShow = {
      nodes: nodes,
      edges: edges
  }
  network = new vis.Network(container, dataToShow, physicsSettings.enabled)

  network.on("selectNode", params => {
    if (params.nodes.length == 1) {
        const firstNode = params.nodes[0]
        if (network.isCluster(firstNode)) {
            network.openCluster(firstNode)
        } else {
          const entityId = firstNode

          const clustersForEntity = parentGroupsWithParent(entityId)

          if (clustersForEntity.length > 0) {
            createClusters(clustersForEntity)
          }
        }
    }
  })

  setTimeout(() => {
    createInitialClusters()
    $(".loading-overlay").fadeOut("fast")
  }, 1000)
  //createInitialClusters()
}

const parentGroupsWithParent = parentId => {
  const children = nodes
                  .filter(node => node && node.parentIds.indexOf(parentId) >= 0)
                  .map(node => node.id)
  if (children.length == 0) return []

  let clustersThatNeedToBeCreated = [parentId]

  for (let idx = 0; idx < children.length; idx++) {
    const childId = children[idx]
    const clustersToCreate = parentGroupsWithParent(childId)

    clustersToCreate.forEach(cluster => {
      if (clustersThatNeedToBeCreated.indexOf(cluster) == -1) {
        clustersThatNeedToBeCreated.push(cluster)
      }
    })
  }

  return clustersThatNeedToBeCreated
}

const createInitialClusters = () => {
  const nodesThatNeedClusters = nodeIds.filter(nodeId => {
    const nodesForParentId = nodes.filter(node => node.parentIds.indexOf(nodeId) >= 0)
    return nodesForParentId.length > 0
  })

  createClusters(nodesThatNeedClusters)
}

const createClusters = (nodesThatNeedClusters = []) => {
  let clusteredNodes = []

  while (clusteredNodes.length != nodesThatNeedClusters.length) {
    for (let idx = 0; idx < nodesThatNeedClusters.length; idx++) {
      const nodeId = nodesThatNeedClusters[idx]

      if (clusteredNodes.indexOf(nodeId) >= 0) continue

      let unprocessedClusters = nodesThatNeedClusters.slice()
      clusteredNodes.forEach(item => {
        const index = unprocessedClusters.indexOf(item)
        unprocessedClusters.splice(index, 1)
      })

      const childClusterNodes = nodes.filter(node =>
        node.parentIds.indexOf(nodeId) >= 0 &&
        unprocessedClusters.indexOf(node.id) >= 0)

      if (childClusterNodes.length > 0) continue

      createCluster(nodeId)
      clusteredNodes.push(nodeId)
    }
  }
}

const createCluster = nodeId => {
  const clusterId = `cluster-${nodeId}`

  const nodeInNetwork = network.clustering.findNode(clusterId)
  if (nodeInNetwork.length > 0) return

  let clusterNodeProperties = {
    id: clusterId,
    label: nodeInfos[nodeId].label + '\n(+)',
    font: {
      multi: true
    },
    parentIds: nodeInfos[nodeId].parentIds,
  }
  const style = getStyle('clusters', nodeInfos[nodeId].type)

  if (style) {
    const styleKeys = Object.keys(style)
    styleKeys.forEach(key => {
      clusterNodeProperties[key] = style[key]
    })
  }

  var clusterOptionsByData = {
    joinCondition:function(parentNodeOptions, childOptions) {
      return childOptions.parentIds.indexOf(parentNodeOptions.id) >= 0
    },
    clusterNodeProperties
  }
  network.clusterByConnection(nodeId, clusterOptionsByData)
}

const setSize = () => {
  const width = $(window).width()
  const height = $(window).height()

  $("#classDiagram").width(width - 5)
  $("#classDiagram").height(height - 5)
}

const getStyle = (type, subtype) => {
  let finalStyle = {}
  const baseStyle = styleSettings[type].default
  const objectStyle = styleSettings[type][subtype]

  const baseKeys = Object.keys(baseStyle)
  baseKeys.forEach(key => {
    finalStyle[key] = baseStyle[key]
  })

  if (objectStyle) {
    const keys = Object.keys(objectStyle)

    keys.forEach(key => {
      finalStyle[key] = objectStyle[key]
    })
  }
  return finalStyle
}

const getPositions = () => {
  const positions = network.getPositions(nodeIds)
  console.log("Node positions: ", positions)
}

const createLegend = () => {
  const nodeKeys = Object.keys(styleSettings.nodes)
  const keysWithoutDefault = nodeKeys.filter(key => key !== 'default')

  const legendEntries = keysWithoutDefault.map(key => {
    const style = getStyle('nodes', key)

    return `<tr>
              <td class='node'>
                <div style='background-color: ${style.color.background}; border: 1px solid ${style.color.border}'></div>
              </td>
              <td class='description'><b>${key}</b></td>
            </tr>`
  })

  const legend = legendEntries.join('')
  $('#legend tbody').html(legend)
}